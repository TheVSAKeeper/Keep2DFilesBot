name: Docker Image CI

concurrency: release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          cache: true
          cache-dependency-path: |
            **/Directory.Packages.props
            **/*.csproj

      - name: Restore
        run: dotnet restore Keep2DFilesBot.slnx

      - name: Build
        run: dotnet build Keep2DFilesBot.slnx --configuration Release --no-restore

#      - name: Format
#        run: dotnet format Keep2DFilesBot.slnx --verify-no-changes

#      - name: Test
#        run: |
#          set -euo pipefail
#          output=$(dotnet test Keep2DFilesBot.slnx --configuration Release --no-build || true)
#          echo "$output"
#          if echo "$output" | grep -q "No test is available"; then
#            echo "Тесты отсутствуют"
#            exit 0
#          fi
#          if echo "$output" | grep -q "Test Run Successful"; then
#            exit 0
#          fi
#          exit 1

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    environment: Release

    steps:
      - uses: actions/checkout@v4

      - name: Prepare image name
        run: |
          image_name=$(echo "docker.io/${{ vars.DOCKERHUB_USERNAME }}/keep2dfilesbot" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=${image_name}" >> "$GITHUB_ENV"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
